const API_URL = `${location.protocol}//${location.hostname}:3000/api`;
const USED_FILES = ['notes.txt'];
const FOLDER_ICON = 'üìÅ';
const FILE_ICON = 'üìÑ';
const IMAGE_ICON = 'üñºÔ∏è';
const AUDIO_ICON = 'üíΩ';
const VIDEO_ICON = 'üìº';
const ARCHIVE_ICON = 'üì¶';

const DROP_ZONE = document.getElementById('drop-zone');

let currentPath = '/';

// –§–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤
function isImage(ext) {
    return ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp'].includes(ext);
}
function isAudio(ext) {
    return ['mp3', 'wav', 'ogg'].includes(ext);
}
function isVideo(ext) {
    return ['mp4', 'avi', 'mkv', 'mov'].includes(ext);
}
function isText(ext) {
    return ['txt', 'json', 'md'].includes(ext);
}
function isArchive(ext) {
    return ['zip', 'ico', 'rar', '7z', 'tar'].includes(ext);
}
//

function normalizePath(path) {
    if (!path) return '/';
    let normalized = path.replace(/\/+/g, '/'); // –∑–∞–º–µ–Ω—è–µ–º // –Ω–∞ /
    if (!normalized.endsWith('/')) {
        normalized += '/';
    }
    return normalized;
}

function getParentPath(path) {
    const normalized = normalizePath(path);
    if (normalized === '/') return '/';
    const parts = normalized.split('/').filter(p => p); // —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
    parts.pop(); // —É–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç
    const parent = '/' + parts.join('/') + (parts.length ? '/' : '');
    return parent;
}

function getSizeString(size) {
    if (size < 1024) return `${size} –ë`;
    if (size < 1024 * 1024) return `${(size / 1024).toFixed(2)} –ö–ë`;
    if (size < 1024 * 1024 * 1024) return `${(size / (1024 * 1024)).toFixed(2)} –ú–ë`;
    return `${(size / (1024 * 1024 * 1024)).toFixed(2)} –ì–ë`;
}

function getFileExtension(fileName) {
    const parts = fileName.split('.');
    return parts.length > 1 ? parts.pop().toLowerCase() : '';
}

function getNameString(file) {
    var name = file.name;

    if (name.length > 40) {
        name = name.slice(0, 40) + '...' + getFileExtension(file.name);
    }

    if (file.isDirectory) {
        return `${FOLDER_ICON} ${name}`;
    }

    const ext = getFileExtension(name);
    if (isImage(ext)) {
        return `${IMAGE_ICON} ${name}`;
    } else if (isAudio(ext)) {
        return `${AUDIO_ICON} ${name}`;
    } else if (isVideo(ext)) {
        return `${VIDEO_ICON} ${name}`;
    } else if (isArchive(ext)) {
        return `${ARCHIVE_ICON} ${name}`;
    }

    return `${FILE_ICON} ${name}`;
}

function createTemplate(templateId) {
    const template = document.getElementById(templateId);
    if (!template) {
        console.error(`Template with id ${templateId} not found`);
        return null;
    }
    return template.content.cloneNode(true);
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∏
function scrollToViewers() {
    document.getElementById('viewers').scrollIntoView({ behavior: 'smooth' });
}

function showImageViewer(fileName, src) {
    hideViewers();
    document.getElementById('viewers').style.display = 'block';
    document.getElementById('image-viewer').style.display = 'block';
    document.getElementById('viewer-file-name').innerText = fileName;
    document.getElementById('image-viewer-img').onload = () => {
        scrollToViewers();
    };
    document.getElementById('image-viewer-img').src = src;
}

function showTextViewer(fileName, src) {
    hideViewers();
    document.getElementById('viewers').style.display = 'block';
    document.getElementById('text-viewer').style.display = 'block';
    document.getElementById('viewer-file-name').innerText = fileName;
    fetch(src)
        .then(res => res.text())
        .then(text => {
            document.getElementById('text-viewer-txt').textContent = text;
            scrollToViewers();
        });
}

function hideViewers() {
    document.getElementById('viewers').style.display = 'none';
    document.getElementById('viewer-file-name').innerText = '';
    document.getElementById('image-viewer').style.display = 'none';
    document.getElementById('text-viewer').style.display = 'none';
}
//

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
async function loadFiles(path = '/') {
    currentPath = normalizePath(path);
    document.getElementById('path-input').value = currentPath;
    const response = await fetch(`${API_URL}/files?path=${encodeURIComponent(path)}`);
    const files = await response.json();
    const fileList = document.getElementById('file-list');
    fileList.innerHTML = '';

    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –º—ã –Ω–µ –≤ –∫–æ—Ä–Ω–µ
    if (currentPath !== '/') {
        const fragment = createTemplate('file-template');
        const fileItem = fragment.querySelector('.file-item');
        const name = fileItem.querySelector('.file-name');
        const info = fileItem.querySelector('.file-info');

        name.textContent = '‚¨ÜÔ∏è ..';
        info.style.display = "none";

        fileItem.onclick = () => {
            const parentPath = getParentPath(currentPath);
            loadFiles(parentPath);
        };

        fileList.appendChild(fragment);
    }

    document.getElementById('notes').style.display = 'none';

    hideViewers();

    DROP_ZONE.style.display = "none";

    await getNotes(path);

    files.sort((a, b) => {
        if (a.isDirectory && !b.isDirectory) return -1;
        if (!a.isDirectory && b.isDirectory) return 1;
        return getFileExtension(a.name).localeCompare(getFileExtension(b.name), undefined, { numeric: true, sensitivity: 'base' });
    });

    files.forEach(file => {
        const fragment = createTemplate('file-template');
        const fileItem = fragment.querySelector('.file-item');
        const name = fileItem.querySelector('.file-name');
        const actions = fileItem.querySelector('.file-actions');
        const infoSize = fileItem.querySelector('.file-size');
        const infoModified = fileItem.querySelector('.file-date');

        name.textContent = getNameString(file);

        if (!file.isDirectory) {
            const ext = getFileExtension(file.name);
            if (isImage(ext)) {
                console.log(`–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${file.name}`);
                fileItem.onclick = (e) => {
                    console.log(`–û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${file.name}`);
                    e.stopPropagation();
                    showImageViewer(file.name, `${API_URL}/download?path=${encodeURIComponent(currentPath + file.name)}`);
                };
            } else if (isText(ext)) {
                console.log(`–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞: ${file.name}`);
                fileItem.onclick = (e) => {
                    console.log(`–û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞: ${file.name}`);
                    e.stopPropagation();
                    showTextViewer(file.name, `${API_URL}/download?path=${encodeURIComponent(currentPath + file.name)}`);
                };
            }

            if (USED_FILES.includes(file.name))
                fileItem.style.opacity = '50%';
        }
        else {
            fileItem.onclick = () => {
                const newPath = normalizePath(`${currentPath}${file.name}`);
                loadFiles(newPath);
            };
        }

        const renameBtn = document.createElement('button');

        renameBtn.textContent = '‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å';
        renameBtn.classList.add('rename');
        renameBtn.onclick = (e) => {
            e.stopPropagation();
            renameFile(file.name, `${path}${file.name}`);
        };

        actions.appendChild(renameBtn);

        const downloadBtn = document.createElement('button');

        if (file.isDirectory) {
            downloadBtn.textContent = 'üì¶ –°–∫–∞—á–∞—Ç—å ZIP';
        } else {
            downloadBtn.textContent = '‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å';
        }

        downloadBtn.onclick = (e) => {
            e.stopPropagation();
            downloadFile(`${currentPath}${file.name}`);
        };
        actions.appendChild(downloadBtn);

        const deleteBtn = document.createElement('button');
        deleteBtn.textContent = 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å';
        deleteBtn.classList.add('delete');
        deleteBtn.onclick = (e) => {
            e.stopPropagation();
            deleteFile(`${path}${file.name}`);
        };

        actions.appendChild(deleteBtn);

        if (!file.isDirectory) {
            infoSize.textContent = getSizeString(file.size);
        }
        infoModified.textContent = new Date(file.modified).toLocaleString();

        fileList.appendChild(fragment);
    });

    DROP_ZONE.style.display = "block";
}

// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
async function getNotes(directory) {
    const response = await fetch(`${API_URL}/notes?path=${encodeURIComponent(directory)}`, {
        method: 'GET'
    });

    const result = await response.json();
    if (result.error) {
        alert(`–û—à–∏–±–∫–∞: ${result.error}`);
    }

    if (result.message) {
        document.getElementById('notes').style.display = 'flex';
        document.getElementById('notes').innerText = result.message;
    }
    else
        document.getElementById('notes').style.display = 'none';
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
function downloadFile(filePath) {
    const url = `${API_URL}/download?path=${encodeURIComponent(filePath)}`;
    const link = document.createElement('a');
    link.href = url;
    link.download = filePath.split('/').pop(); // –∏–º—è —Ñ–∞–π–ª–∞
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
async function deleteFile(filePath) {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å ${filePath}?`)) {
        const response = await fetch(`${API_URL}/files?path=${encodeURIComponent(filePath)}`, {
            method: 'DELETE'
        });

        const result = await response.json();
        if (result.error) {
            alert(`–û—à–∏–±–∫–∞: ${result.error}`);
        }

        refreshCurrentFolder(); // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    }
}

// –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
async function renameFile(oldName, filePath) {
    const newName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:', oldName);
    if (newName) {
        const response = await fetch(`${API_URL}/rename`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ path: filePath, name: newName })
        });

        const result = await response.json();
        if (result.error) {
            alert(`–û—à–∏–±–∫–∞: ${result.error}`);
        }

        refreshCurrentFolder();
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
async function createFolder() {
    const folderName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏:');
    if (folderName) {
        const response = await fetch(`${API_URL}/files`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ path: `${currentPath}${folderName}`, type: 'folder' })
        });

        const result = await response.json();
        if (result.error) {
            alert(`–û—à–∏–±–∫–∞: ${result.error}`);
        }

        refreshCurrentFolder();
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
async function createFile() {
    const fileName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:');
    if (fileName) {
        const response = await fetch(`${API_URL}/files`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ path: `${currentPath}${fileName}`, type: 'file' })
        });

        const result = await response.json();
        if (result.error) {
            alert(`–û—à–∏–±–∫–∞: ${result.error}`);
        }

        refreshCurrentFolder();
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
async function uploadFile(file, destination) {
    if (!file || !destination) return;

    const fileData = new FormData();
    fileData.append('file', file);

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    const progressContainer = document.getElementById('upload-progress');
    const progressBar = document.getElementById('progress-bar');
    const progressText = document.getElementById('progress-text');
    progressContainer.style.display = 'block';
    progressBar.style.width = '0%';
    progressText.textContent = `0% (${file.name})`;

    return new Promise((resolve, reject) => {
        const xhr = new XMLHttpRequest();
        xhr.open('POST', `${API_URL}/upload?destination=${destination}`);

        xhr.upload.addEventListener('progress', (e) => {
            if (e.lengthComputable) {
                const percent = Math.round((e.loaded / e.total) * 100);
                progressBar.style.width = percent + '%';
                progressText.textContent = `${percent}% (${file.name})`;
            }
        });

        xhr.onload = () => {
            if (xhr.status === 200) {
                progressBar.style.width = '100%';
                progressText.textContent = `‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${file.name}`;
                setTimeout(() => {
                    progressContainer.style.display = 'none';
                }, 800);
                resolve();
            } else {
                alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${file.name}: ${xhr.responseText}`);
                progressContainer.style.display = 'none';
                reject();
            }
        };

        xhr.onerror = () => {
            alert(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${file.name}`);
            progressContainer.style.display = 'none';
            reject();
        };

        xhr.send(fileData);
    });
}

// –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥
function refreshCurrentFolder() {
    loadFiles(currentPath);
}

// –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—É—Ç–∏ –∏–∑ input
function goToPath() {
    const newPath = document.getElementById('path-input').value || '/';
    loadFiles(newPath);
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É Enter
document.getElementById('path-input').addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
        goToPath();
    }
});

document.getElementById('upload-btn').addEventListener('click', () => {
    document.getElementById('upload-input').click();
});

document.getElementById('upload-input').addEventListener('change', async () => {
    const input = document.getElementById('upload-input');
    if (!input.files || input.files.length < 1) return;

    for (let index = 0; index < input.files.length; index++) {
        const file = input.files[index];
        await uploadFile(file, currentPath);
    }

    input.value = ''; // —Å–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞

    refreshCurrentFolder();
});

const dropZone = document.getElementById('drop-zone');

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
    dropZone.addEventListener(eventName, (e) => e.preventDefault());
    dropZone.addEventListener(eventName, (e) => e.stopPropagation());
});

// –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∑–æ–Ω—É –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
['dragenter', 'dragover'].forEach(eventName => {
    dropZone.addEventListener(eventName, () => dropZone.classList.add('dragover'));
});

['dragleave', 'drop'].forEach(eventName => {
    dropZone.addEventListener(eventName, () => dropZone.classList.remove('dragover'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ drop —Ñ–∞–π–ª–æ–≤
dropZone.addEventListener('drop', async (e) => {
    const files = e.dataTransfer.files;
    if (files.length === 0) return;

    for (let file of files) {
        await uploadFile(file, currentPath);
    }

    refreshCurrentFolder();
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
loadFiles();
